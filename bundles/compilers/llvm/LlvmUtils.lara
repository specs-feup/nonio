import lara.Io;
import lara.Platforms;
import lara.System;
import LaradSetup;

var LlvmUtils = {};

LlvmUtils.getClang = function() {
	var compilerFolder = LaradSetup.getCompilerFolder();
	return System.getExecutableFile(LaradSetup.getCompilerPrefix() + "clang", compilerFolder, true);
}

LlvmUtils.getLlc = function() {
	var compilerFolder = LaradSetup.getCompilerFolder();
	return System.getExecutableFile(LaradSetup.getCompilerPrefix() + "llc", compilerFolder, true);
}

LlvmUtils.getOpt = function() {
	var compilerFolder = LaradSetup.getCompilerFolder();
	return System.getExecutableFile(LaradSetup.getCompilerPrefix() + "opt", compilerFolder, true);
}

LlvmUtils.getLlvmLink = function() {
        var compilerFolder = LaradSetup.getCompilerFolder();
        return System.getExecutableFile(LaradSetup.getCompilerPrefix() + "llvm-link", compilerFolder, true);
}


LlvmUtils.getAs = function() {
        var compilerFolder = LaradSetup.getCompilerFolder();
        return System.getExecutableFile(LaradSetup.getCompilerPrefix() + "llvm-as", compilerFolder, true);
}

LlvmUtils.getSize = function() {
        var compilerFolder = LaradSetup.getCompilerFolder();
        return System.getExecutableFile(LaradSetup.getCompilerPrefix() + "llvm-size", compilerFolder, true);
}




LlvmUtils.getApplicationExeName = function() {
	return LaradSetup.getExeName("application.exe");
}

LlvmUtils.getVerifyExeName = function() {
	return LaradSetup.getExeName("application_verify.exe");
}

