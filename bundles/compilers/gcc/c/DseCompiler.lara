import DseCompilerBase;
import DseCompilerResources;
import DseLanguage;
import GccUtils;
import dse.DseUtils;
import lara.util.ProcessExecutor;
import lara.Io;
import DsePlatform;


/*** INITIALIZATION ***/

DseCompiler.LOG_FILENAME = "DseCompiler";

DseCompiler._init = function() {
	DseCompiler._addGeneratedFileCheck("main_wtiming.s",  "ASM for main function not generated");
	DseCompiler._addGeneratedFileCheck("function.optim.s",  "ASM for optimized function IR not generated");
	//DseCompiler._addGeneratedFileCheck(System.getExecutableName("application"),  "Binary not generated");
	DseCompiler._addGeneratedFileCheck(GccUtils.getApplicationExeName(),  "Binary not generated");
		
	// Delete log files
	Io.deleteFile(DseUtils.getLogFile(DseCompiler.LOG_FILENAME));
	Io.deleteFile(DseUtils.getLogFile());
}

DseCompiler._temp = DseCompiler._init();

DseCompiler._getJson =function(path) {
	return DseCompilerResources.getJson(DsePlatform.getCompilerConfig() + "/" + path);
}

/*** State to preserve between calls ***/
 
/**
 * Files that have been created by the compilation process.
 */
DseCompiler._compilationFiles = [];


/*** PUBLIC FUNCTIONS OVERRIDE ***/

DseCompiler.clean = function() {

	// Delete DseCompiler files
	var files = Io.getPaths("./", GccUtils.getApplicationExeName(), GccUtils.getVerifyExeName(), "function.optim.s", "main_wtiming.s", "include.h", "*.dot", "funtion.optim.o");
	for(var file of files) {
		Io.deleteFile(file);
	}

}

DseCompiler.compileLauncher = function() {
	Io.deleteFiles("main_wtiming.s", GccUtils.getVerifyExeName());	// this does not need to be removed if removed before by calling 'DseCompiler.clean()'
	
	//var compileParams = DseCompiler._getJson("compile.json");
	var compileParams = DseCompiler._getJson("compile.json");

	var filesToCompile = DseLanguage.getLauncherFilesToCompile().join(" ");
	
	debug("Executing DseCompiler.compileLauncher() - Compilation");
	DseUtils.executeTool(GccUtils.getGcc() + " " + filesToCompile + " " + compileParams.gccFlags + " -S -o main_wtiming.s", DseCompiler.LOG_FILENAME);

	// If verification is performed in a separated main
	var verifyExeName = GccUtils.getVerifyExeName();
	if(LaradSetup.isVerificationSeparated === true) {
		Io.deleteFile(verifyExeName);
		var verificationFilesToCompile = DseLanguage.getVerificationFilesToCompile().join(" ");

	    var linkParams = DseCompiler._getJson("link.json");
		var linkFlags = linkParams.linkFlags !== undefined ? linkParams.linkFlags : "";

		var linker = GccUtils.getGcc(); // default linker/compiler
		if(Io.isFile(LaradSetup.specialLinker)) {
			linker = LaradSetup.specialLinker;
		}
		//println("linker: " + linker);

		debug("Executing DseCompiler.compileLauncher() - Verifier");
		var verifyExecutor = new ProcessExecutor();
		verifyExecutor.setTimeout(LaradSetup.defaultTimelimit)
			.execute(linker + " " + verificationFilesToCompile + " " + compileParams.verificationFlags + " " + " -o " + verifyExeName + " " + linkFlags);
            //println("VERIFICATION FLAGS: " + compileParams.verificationFlags);
                if(verifyExecutor.getReturnValue() !== 0) {
                    throw "Could not generate separate verification binary\n" +
                    "Command: " + verifyExecutor.getCommand() + "\n" + 
                    verifyExecutor.getConsoleOutput();
                }

	
	}
}

DseCompiler.frontend = function() {
		
	//var filesToCompile = DseLanguage.getKernelFilesToCompile().join(" ");
	// DOES NOTHING
}

DseCompiler.opt = function(optFlags) {

        System.execute("pkill -f cc1"); // avoid acumulation of "cc1" processes

	Io.deleteFiles("function.optim.s", "function.optim.o", "*.dot");

	var optParams = DseCompiler._getJson("opt.json");

	// optFlags must be allways after optParams.gcc flags 	
	debug("Executing DseCompiler.opt()");
	var execution = DseUtils.executeTool(GccUtils.getGcc() + " " + optParams.gccFlags + " " + optFlags + " function.c -S -o function.optim.s", DseCompiler.LOG_FILENAME, LaradSetup.defaultTimelimit);

        // for size metric
        DseUtils.executeTool(GccUtils.getAs() + " function.optim.s -o function.optim.o", DseCompiler.LOG_FILENAME);


}

DseCompiler.backend = function() {

	// DOES NOTHING
}

DseCompiler.link = function() {


	Io.deleteFiles(GccUtils.getApplicationExeName());

	var linkParams = DseCompiler._getJson("link.json");
	var linkFlags = linkParams.linkFlags !== undefined ? linkParams.linkFlags : "";


	var linker = GccUtils.getGcc(); // default linker
	if(Io.isFile(LaradSetup.specialLinker)) {
		linker = LaradSetup.specialLinker;
	}
	//println("linker: " + linker);
	
	debug("Executing DseCompiler.link()");
	//DseUtils.executeTool(linker + " " + linkFlags + " -o " + GccUtils.getApplicationExeName() + " function.optim.s main_wtiming.s", DseCompiler.LOG_FILENAME, LaradSetup.defaultTimelimit);

	DseUtils.executeTool(linker + " -o " + GccUtils.getApplicationExeName() + " function.optim.s main_wtiming.s " + DseLanguage.getExtraSources().join(" ") + " " + DseLanguage.getExtraIncludesFlags().join(" ") + " " +  linkFlags , DseCompiler.LOG_FILENAME, LaradSetup.defaultTimelimit);

}

DseCompiler.getTestExecutable = function() {
	return Io.getPath(GccUtils.getApplicationExeName());
}

DseCompiler.getVerificationExecutable = function() {
	return Io.getPath(GccUtils.getVerifyExeName());
}

/*
DseCompiler.execute = function() {
	
	//Io.deleteFile("info.dat");
	
	var application = new ProcessExecutor();
	application.setTimeout(LaradSetup.defaultTimelimit)
		.setPrintToConsole(false);
	
	application.execute(System.getExecutableName("application"));
		
	// TODO: If file is not created, DSE system gives an "error", find out why
	Io.writeFile("info.dat", application.getReturnValue());

	if(LaradSetup.isVerificationSeparated === true) {
		var verification = new ProcessExecutor();
		verification.setTimeout(LaradSetup.defaultTimelimit)
			.setPrintToConsole(false);
	
		// Execute verification in another ProcessExecutor
		verification.execute(System.getExecutableName("application_verify"));

		// Save result of verification ProcessExecutor		
		application.setCustomReturnValue(verification.getReturnValue());
	}
	
	return application;
}
*/
/*** PRIVATE FUNCTIONS OVERRIDE ***/

